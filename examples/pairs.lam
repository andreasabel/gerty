-- Examples for the builtin pairs

-- Example converting a 2-arity function to a function on pairs
uncurry : (a b c : Type 0) -> (a -> b -> c) -> <a * b> -> c
uncurry = \a b c f p -> case p of <x, y> -> f x y

-- Example converting a function from pairs to a 2-arity function
curry : (a b c : Type 0) -> (<a * b> -> c) -> a -> b -> c
curry = \a b c f x y -> f <x, y>

pairId : (a b : Type 0) -> <a * b> -> <a * b>
pairId = \a b p -> case p of <x, y> -> <x, y>

-- Example showing the dependent tensor type
pairTy : (a : Type 0) -> (b : a -> Type 0) -> Type 0
pairTy = \a b -> <x : a * b x>

-- Example showing pair construction
mkPair : (a : Type 0) -> (b : a -> Type 0) -> (x : a) -> b x -> <x : a * b x>
mkPair = \a b x y -> <x, y>

-- The first projection
fst : (a : (.0, .3) Type 0) (b : (.0, .1) (x : (_, _) a) -> Type 0) -> <x [.0] : a * @[.0] b x> -> a
fst = \a b p -> case p of <x, y> -> case y of [z] -> x

-- First projection on non-dependent pairs
fst' : (a b : Type 0) -> <a * @[.0] b> -> a
fst' = \a b p -> fst a (\x -> b) p

-- The second projection
snd : (a : Type 0) (b : a -> Type 0) (p : <x : a * b x>) -> b (fst a b p)
snd = \a b p -> case p as z in b (fst a b z) of <x, y> -> y

-- Second projection on non-dependent pairs
snd' : (a b : Type 0) -> <a * b> -> b
snd' = \a b p -> snd a (\x -> b) p

-- Pair eliminator
letTen : (a : Type 0) (b : a -> Type 0) (c : Type 0) -> ((x : a) -> b x -> c) -> <x : a * b x> -> c
letTen = \a b c f p -> case p of <x, y> -> f x y
