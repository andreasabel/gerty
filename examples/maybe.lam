-- Example of 'Maybe' type

-- First we define the coproducts again
coproduct : (l1 l2 : Level) -> Type l1 -> Type l2 -> Type (lsuc (lmax l1 l2))
coproduct = \l1 l2 lt rt -> (x : Bool) * (if x then lt else rt)

inl : (l1 l2 : Level) (lt : Type l1) (rt : Type l2) -> lt -> coproduct l1 l2 lt rt
inl = \l1 l2 lt rt lv -> (true, lv)

inr : (l1 l2 : Level) (lt : Type l1) (rt : Type l2) -> rt -> coproduct l1 l2 lt rt
inr = \l1 l2 lt rt rv -> (false, rv)

coproductElim : (l1 l2 l3 : Level) (a : Type l1) (b : Type l2) (c : Type l3) -> (a -> c) -> (b -> c) -> coproduct l1 l2 a b -> c
coproductElim = \l1 l2 l3 a b c lf rf p -> let (t, v) = p in if t then lf v else rf v


-- | Maybe a = none | some a
Maybe : (l : Level) -> Type l -> Type (lsuc l)
Maybe = \l a -> coproduct 0 l Unit a

none : (l : Level) (a : Type l) -> Maybe l a
none = \l a -> inl 0 l Unit a unit

some : (l : Level) (a : Type l) -> a -> Maybe l a
some = \l a x -> inr 0 l Unit a x

maybe : (l1 l2 : Level) (a : Type l1) (b : Type l2) -> b -> (a -> b) -> Maybe l1 a -> b
maybe = \l1 l2 a b def f x -> coproductElim 0 l1 l2 Unit a b (\u -> def) f x
