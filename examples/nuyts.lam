-- examples from 'Parametric Quantifiers for Dependent Type Theory'
-- (by Andreas Nuyts, Andrea Vezzosi, Dominique Devriese)

-- I've left the subject grade for 'x' and 'y' as '._', as I'm not
-- sure what these would be (they vary based on the type). I think a
-- goal here would be to allow RI to take in the grades for the use of
-- 'C', 'r', 'x', and 'y' as parameters. (GD: (2020-06-17))
--
-- RI A B :≡ Π(C : Type).(C → A) → (C → B)
RI : (A : [.1, .0] Type 2) -> (B : [.1, .0] Type 2) -> Type 3
RI = \A -> \B
      -> (C : [.0, .2] Type 2)
      -> (r : [.1, .0] (x : [._, .0] C) -> A)
      -> (y : [._, .0] C) -> B

-- this 'f' example would need 'y' and 'r' to have subject grade '0'
--
-- f : RI (Type 1) (Type 1)
-- f = \C -> \r -> \y -> Type 0

-- if we can go from 'C -> D', then we trivially have 'C -> D'
g : (D : [.0, .2] Type 2) -> RI D D
g = \D -> \C -> \r -> \y -> r y

-- given that we have 'D -> E', then whenever we have 'C -> D', we
-- have 'C -> E'
h : (D : [.0, .2] Type 2) (E : [.0, .2] Type 2) (dToE : [.1, .0] (z : [.1, .0] D) -> E) -> RI D E
h = \D -> \E -> \dToE -> \C -> \r -> \y -> dToE (r y)

i : (D : [.0, .2] Type 2) -> RI D ((E : [.0, .0] Type 1) -> D)
i = \D -> \C -> \r -> \y -> \z -> r y

-- currently not working due to hardcoded levels (otherwise is fine)
-- (GD: 2020-06-17)
--
-- j : (D : [.0, .2] Type 2) -> RI ((E : [.0, .0] Type 2) -> D) D
-- j = \D -> \C -> \r -> \y -> r y C
